#!/bin/bash
# script to run multiple Marlin BookStore scenarios for benchmarking

function printUsage() {
	echo "Usage:"
	echo "run-benchmarking-bookstore-Marlin [options] --inputfile <slcio-file>"
	echo ""
	echo "Options:"
	echo " -h --help Print help and exit"
	echo ""
}

if [ -z "$MARLINMT_DIR" ]; then
	echo "MARLINMT_DIR not set. Please setup your env!"
	exit 1;
fi

OPTS=`getopt -o h -1 inputfile: -n 'parse-options' -- "$@"`
eval --set "$OPTS"

steeringfile="${MARLINMT_DIR}benchmarking/Marlin/hist_filling.xml"
nhists=(1 2 3)
nfills=(30)
nbins=(1000)
accesstypes=("Rotating" "Continuous")

accesstype_to_id () {
	if [[ $1 == "Rotating" ]]; then
		echo 0
	elif [[ $1 == "Continuous" ]]; then
		echo 1
	else
		>&2 echo "unrecognized access type: '$1'"
		exit 1
	fi
}

while true; do
  case "$1" in
    --inputfile ) inputfile=$2; shift; shift ;;
	# other inputs
    -h | --help )  printUsage; exit 0 ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done


if [ "$inputfile" == "" ]
then
  echo "ERROR: --inputfile argument is mandatory"
  printUsage
  exit 1
fi


output="MarlinBenchmarking.csv"

echo "Start benchmarking ..."

echo "concurrency,nFills,accessType,mutex,memoryLayout,nHists,nBins,tSerial,tParallel,scaling,tReal,tUnpack,tFill,nEvents,fillingActive" > $output

echo "Running with following settings:"
echo "  - n fills:      ${nfills[@]}"
echo "  - n Hists:      10^(${nhists[@]})"
echo "  - n bins:       ${nbins[@]}"
echo "  - access types: ${accesstypes[@]}"
echo "  - Marlin steering file: $steeringfile"
echo "  - Benchmark output file: $output"

# load the file in the cache for next
echo "Loading input file into cache: ${inputfile}"
#anajob ${inputfile} >> /dev/null
nEvents=`lcio_event_counter $inputfile`
echo "n events $nEvents"

for nf in ${nfills[@]}; do
	for at in ${accesstypes[@]}; do
		atid=`accesstype_to_id $at`
		for nh in ${nhists[@]}; do
			for nb in ${nbins[@]}; do
				echo "Running Marlin with:"
				echo "  histogram filling:"
				echo "  -- access type:       ${at}"
				echo "  -- number histograms: ${nh}"
				echo "  -- number bins:       $nb"
				echo "  -- number fills:      $nf"
				totalTime=(`time ( Marlin \
					$steeringfile \
					--HistFilling.NBins="$nb" \
					--HistFilling.NHists10="$nh" \
					--HistFilling.NFills="$nf" \
					--HistFilling.AccessType="$atid" \
					--global.LCIOInputFiles="$inputfile" > scaling_temp_.log 2>&1) \
					2>&1 1>/dev/null `)
			  if [ $? -ne 0 ]; then
					>&2 echo "Marlin failed!, stop benchmarks!"
					exit 1
				fi
				real=${totalTime[1]}
				fillT=$(cat scaling_temp_.log | sed -n '/\[ MESSAGE "Marlin"\]/s/.*HistFilling\s*\([0-9\.+-e]*\).*/\1/p')
				sumT=$( cat scaling_temp_.log | sed -n 's/.*Total:\s*\([0-9\.\e+-]*\) s in.*/\1/p' ) 

				echo "Result:"
				echo "  real Time:  $real"
				echo "  total Time: $sumT"
				echo "  fill Time:  $fillT"
				echo "1,$nf,$at,null,null,$nh,$nb,$sumT,$sumT,1,$real,0,$fillT,$nEvents,true" >> $output
		done
		done
	done
done
