#!/bin/bash 

function printUsage() {
  echo "Usage:"
  echo "run-benchmarking-bookstore [options] --inputfile <slcio-file>"
  echo ""
  echo "Run MarlinMT for multi-core benchmarking"
  echo ""
  echo "Options:"
  echo "  -h --help                  Print help and exit"
  echo ""
}


if [ -z "$MARLINMT_DIR" ]
then
  echo "MARLINMT_DIR not set. Please setup your environment!"
  exit 1
fi

if [ -z "$LCIO_DIR" ]
then
  echo "LCIO_DIR not set. Please setup your environment!"
  exit 1
fi


OPTS=`getopt -o h -l inputfile: -n 'parse-options' -- "$@"`
eval set -- "$OPTS"

# general configuration
steeringfile="${MARLINMT_DIR}benchmarking/hist_filling.xml"
cores=(4) # (1 4 8 12)
nhists=(0) # (1 2 3)
nfills=(30)
nbins=(100)
accesstypes=("Rotating") # "Continuous")
memorylayouts=("Share" "Copy" "Mutex")

accesstype_to_id () {
	if [[ $1 == "Rotating" ]]; then
		echo 0
	elif [[ $1 == "Continuous" ]]; then
		echo 1
	else
		>&2 echo "unrecognized access type: '$1'"
		exit 1
	fi
}

while true; do
  case "$1" in
    --inputfile ) inputfile=$2; shift; shift ;;
	# other inputs
    -h | --help )  printUsage; exit 0 ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done


if [ "$inputfile" == "" ]
then
  echo "ERROR: --inputfile argument is mandatory"
  printUsage
  exit 1
fi


output="MarlinMTBenchmarking.csv"


if [[ "$native" == "true" ]] && [[ $memorylayout != "Shared" ]]; then
	echo "ERROR copied memory layout is native not possible!"
	exit 1
fi

echo "Start benchmarking ..."

echo "concurrency,nFills,accessType,mutex,memoryLayout,nHists,nBins,tSerial,tParallel,scaling,tReal,tUnpack,tFill,nEvents,fillingActive" > $output


echo "Running with following settings:"
echo "  - n cores:      ${cores[@]}"
echo "  - n fills:      ${nfills[@]}"
echo "  - n Hists:      10^(${nhists[@]})"
echo "  - n bins:       ${nbins[@]}"
echo "  - access types: ${accesstypes[@]}"
echo "  - layout:       ${memorylayouts[@]}"
echo "  - Marlin steering file: $steeringfile"
echo "  - Benchmark output file: $output"

# load the file in the cache for next
echo "Loading input file into cache: ${inputfile}"
anajob ${inputfile} >> /dev/null
nEvents=`lcio_event_counter $inputfile`
echo "n events $nEvents"

read_results () {
	totalProcessorTime=(`cat scaling_temp_.log | grep serial | awk '{print $7, $9, $11}'`)
	serial=${totalProcessorTime[0]}
	parallel=${totalProcessorTime[1]}
	scaling=${totalProcessorTime[2]}
	real=${totalTime[1]}
	unpackTime=`cat scaling_temp_.log \
		| sed -n '/EventUnpacking.*==>/s/.*EventUnpacking\s*\(\S*\).*/\1/p'`
	fillTime=`cat scaling_temp_.log \
		| sed -n '/HistFilling.*==>/s/.*HistFilling\s*\(\S*\).*/\1/p'`
}

for c in ${cores[@]}; do
	echo "Running MarlinMT without filling."
	echo "  general"
	echo "  -- N cores: ${c}"
	totalTime=(`time ( MarlinMT \
		-c ${steeringfile} \
		--datasource.LCIOInputFiles="$inputfile" \
		-j ${c} \
		--constant.FillingActive="false" > scaling_temp_.log ) 2>&1 1>/dev/null `)
	read_results
	echo "$c,0,null,null,null,0,0,$serial,$parallel,$scaling,$real,$unpackTime,0,$nEvents,false" >> $output
	for nf in ${nfills[@]}; do
		for at in ${accesstypes[@]}; do
			atid=`accesstype_to_id $at`
			for ml in ${memorylayouts[@]}; do
				if [[ $ml = "Mutex" ]]; then
					ml="Share"
					mutex="true"
				else 
					mutex="false"
				fi
				for nh in ${nhists[@]}; do
					for nb in ${nbins[@]}; do
						echo "Running MarlinMT with:"
						echo "  general:"
						echo "  -- N cores:            ${c}"
						echo "  histogram filling:"
						echo "  -- use mutex:          ${mutex}"
						echo "  -- memory layout:      ${ml}"
						echo "  -- access type:        ${at}"
						echo "  -- number histograms:  ${nh}"
						echo "  -- number bins:        ${nb}"
						echo "  -- number fills:       ${nf}"
						totalTime=(`time ( MarlinMT \
							-c ${steeringfile} \
							--HistFilling.NBins="$nb" \
							--HistFilling.NHists10="$nh" \
							--HistFilling.NFills="$nf" \
							--HistFilling.AccessType="$atid" \
							--HistFilling.UseMutex="$mutex" \
							--datasource.LCIOInputFiles="$inputfile" \
							--bookstore.DefaultMemoryLayout=${ml} \
							-j ${c} > scaling_temp_.log ) 2>&1 1>/dev/null `)
						if [ $? -ne 0 ]; then
							>&2 echo "MarlinMT failed!, stop benchmarks!"
							exit 1
						fi
						read_results
						echo "Result:"
						echo "  serial Time:   $serial"
						echo "  parallel Time: $parallel"
						echo "  scaling:       $scaling"
						echo "  real Time:     $real"
						echo "  fill Time:     $fillTime"
						echo "  unpackTime:    $unpackTime"
						echo "$c,$nf,$at,$mutex,$ml,$nh,$nb,$serial,$parallel,$scaling,$real,$unpackTime,$fillTime,$nEvents,true" >> $output
					done
				done
			done
		done
	done
done

